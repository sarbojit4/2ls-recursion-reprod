./2ls --graphml-witness witness.graphml --32 --propertyfile ../sv-benchmarks/c/properties/unreach-call.prp ../sv-benchmarks/c/recursive/gcd02.c


--------------------------------------------------------------------------------


perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
	LANGUAGE = (unset),
	LC_ALL = (unset),
	LC_MEASUREMENT = "en_GB.UTF-8",
	LC_PAPER = "en_GB.UTF-8",
	LC_MONETARY = "en_GB.UTF-8",
	LC_NAME = "en_GB.UTF-8",
	LC_ADDRESS = "en_GB.UTF-8",
	LC_NUMERIC = "en_GB.UTF-8",
	LC_TELEPHONE = "en_GB.UTF-8",
	LC_IDENTIFICATION = "en_GB.UTF-8",
	LC_TIME = "en_GB.UTF-8",
	LANG = "C"
    are supported and installed on your system.
perl: warning: Falling back to the standard locale ("C").
2LS version 0.7.1 (based on CBMC 5.6)
Reading GOTO program from file
Adding CPROVER library
Function Pointer Removal
Generic Property Instrumentation
Constant Propagation
Context-sensitive analysis from _start
Using intervals domain with binary search solver
Computing SSA of main
Simplifying
Computing SSA of _start
Simplifying
Computing SSA of divides
Simplifying
Computing SSA of gcd
Simplifying
Computing SSA of __CPROVER_initialize
Simplifying

Summarizing function _start
Checking precondition of __CPROVER_initialize
Function __CPROVER_initialize not analyzed yet
Computing calling context for function __CPROVER_initialize
Recursively summarizing function __CPROVER_initialize
Analyzing function __CPROVER_initialize
Computing summary

Summary for function __CPROVER_initialize
params: 
globals_in: __CPROVER_threads_exited __CPROVER_malloc_is_new_array __CPROVER_dead_object'obj __CPROVER_deallocated'obj __CPROVER_malloc_object'obj __CPROVER_memory_leak'obj __CPROVER_dead_object __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak __CPROVER_rounding_mode __CPROVER_malloc_size __CPROVER_next_thread_id __CPROVER_pipe_count __CPROVER_thread_id 
globals_out: __CPROVER_threads_exited#88 __CPROVER_malloc_is_new_array#80 __CPROVER_dead_object'obj __CPROVER_deallocated'obj __CPROVER_malloc_object'obj __CPROVER_memory_leak'obj __CPROVER_dead_object#78 __CPROVER_deallocated#79 __CPROVER_malloc_object#81 __CPROVER_memory_leak#83 __CPROVER_rounding_mode#86 __CPROVER_malloc_size#82 __CPROVER_next_thread_id#84 __CPROVER_pipe_count#85 __CPROVER_thread_id#87 
forward precondition: TRUE
forward transformer: __CPROVER_rounding_mode#86 <= 0 && -((signed __CPROVER_bitvector[33])__CPROVER_rounding_mode#86) <= 0 && __CPROVER_malloc_size#82 <= 0u && -((signed __CPROVER_bitvector[33])__CPROVER_malloc_size#82) <= 0 && __CPROVER_next_thread_id#84 <= 0ul && -((signed __CPROVER_bitvector[33])__CPROVER_next_thread_id#84) <= 0 && __CPROVER_pipe_count#85 <= 0u && -((signed __CPROVER_bitvector[33])__CPROVER_pipe_count#85) <= 0 && __CPROVER_thread_id#87 <= 0ul && -((signed __CPROVER_bitvector[33])__CPROVER_thread_id#87) <= 0
forward invariant: TRUE
backward precondition: not computed
backward postcondition: not computed
backward transformer: not computed
backward invariant: not computed
termination argument: not computed
terminates: unknown

Checking precondition of main
Function main not analyzed yet
Computing calling context for function main
Recursively summarizing function main
Checking precondition of gcd
Function gcd not analyzed yet
Computing calling context for function gcd
Recursively summarizing function gcd
Function gcd is recursive
Analyzing function gcd
Computing summary
------------------------------------------------------------------
-------------------------------------------------------------------


Summary for function gcd
params: y1 y2 
globals_in: 
globals_out: gcd#return_value#phi21 
forward precondition: y1 <= 2147483647 && -((signed __CPROVER_bitvector[33])y1) <= -1 && y2 <= 2147483647 && -((signed __CPROVER_bitvector[33])y2) <= -1
forward transformer: y1 <= 2147483647 && -((signed __CPROVER_bitvector[33])y1) <= -1 && y2 <= 2147483647 && -((signed __CPROVER_bitvector[33])y2) <= -1 ==> (signed __CPROVER_bitvector[34])-((signed __CPROVER_bitvector[33])y1) - (signed __CPROVER_bitvector[34])gcd#return_value#phi21 <= -2 && (signed __CPROVER_bitvector[33])y1 + (signed __CPROVER_bitvector[33])gcd#return_value#phi21 <= 4294967294 && (signed __CPROVER_bitvector[34])-((signed __CPROVER_bitvector[33])y2) - (signed __CPROVER_bitvector[34])gcd#return_value#phi21 <= -2 && (signed __CPROVER_bitvector[33])y2 + (signed __CPROVER_bitvector[33])gcd#return_value#phi21 <= 4294967294 && (signed __CPROVER_bitvector[33])y1 - (signed __CPROVER_bitvector[33])gcd#return_value#phi21 <= 0 && (signed __CPROVER_bitvector[33])gcd#return_value#phi21 - (signed __CPROVER_bitvector[33])y1 <= 0 && (signed __CPROVER_bitvector[33])y2 - (signed __CPROVER_bitvector[33])gcd#return_value#phi21 <= 0 && (signed __CPROVER_bitvector[33])gcd#return_value#phi21 - (signed __CPROVER_bitvector[33])y2 <= 0 && (signed __CPROVER_bitvector[34])((signed __CPROVER_bitvector[33])y1 + (signed __CPROVER_bitvector[33])y2) - (signed __CPROVER_bitvector[34])gcd#return_value#phi21 <= 2147483647 && (signed __CPROVER_bitvector[34])gcd#return_value#phi21 - (signed __CPROVER_bitvector[34])((signed __CPROVER_bitvector[33])y1 + (signed __CPROVER_bitvector[33])y2) <= -1
forward invariant: y1 <= 2147483647 && -((signed __CPROVER_bitvector[33])y1) <= -1 && y2 <= 2147483647 && -((signed __CPROVER_bitvector[33])y2) <= -1 ==> TRUE
backward precondition: not computed
backward postcondition: not computed
backward transformer: not computed
backward invariant: not computed
termination argument: not computed
terminates: unknown

Checking precondition of divides
Function divides not analyzed yet
Computing calling context for function divides
Recursively summarizing function divides
Function divides is recursive
Analyzing function divides
Computing summary
------------------------------------------------------------------
-------------------------------------------------------------------


Summary for function divides
params: n m 
globals_in: 
globals_out: divides#return_value#phi55 
forward precondition: n <= 2147483647 && -((signed __CPROVER_bitvector[33])n) <= -1 && m <= 2147483647 && -((signed __CPROVER_bitvector[33])m) <= -1
forward transformer: n <= 2147483647 && -((signed __CPROVER_bitvector[33])n) <= -1 && m <= 2147483647 && -((signed __CPROVER_bitvector[33])m) <= -1 ==> (signed __CPROVER_bitvector[34])-((signed __CPROVER_bitvector[33])n) - (signed __CPROVER_bitvector[34])divides#return_value#phi55 <= -2 && (signed __CPROVER_bitvector[33])n + (signed __CPROVER_bitvector[33])divides#return_value#phi55 <= 2147483648 && (signed __CPROVER_bitvector[34])-((signed __CPROVER_bitvector[33])m) - (signed __CPROVER_bitvector[34])divides#return_value#phi55 <= -1 && (signed __CPROVER_bitvector[33])m + (signed __CPROVER_bitvector[33])divides#return_value#phi55 <= 3864772606 && (signed __CPROVER_bitvector[33])n - (signed __CPROVER_bitvector[33])divides#return_value#phi55 <= 2147483647 && (signed __CPROVER_bitvector[33])divides#return_value#phi55 - (signed __CPROVER_bitvector[33])n <= 1287094270 && (signed __CPROVER_bitvector[33])m - (signed __CPROVER_bitvector[33])divides#return_value#phi55 <= 3221225469 && (signed __CPROVER_bitvector[33])divides#return_value#phi55 - (signed __CPROVER_bitvector[33])m <= 1 && (signed __CPROVER_bitvector[34])((signed __CPROVER_bitvector[33])n + (signed __CPROVER_bitvector[33])m) - (signed __CPROVER_bitvector[34])divides#return_value#phi55 <= 4294967293 && (signed __CPROVER_bitvector[34])divides#return_value#phi55 - (signed __CPROVER_bitvector[34])((signed __CPROVER_bitvector[33])n + (signed __CPROVER_bitvector[33])m) <= 0
forward invariant: n <= 2147483647 && -((signed __CPROVER_bitvector[33])n) <= -1 && m <= 2147483647 && -((signed __CPROVER_bitvector[33])m) <= -1 ==> TRUE
backward precondition: not computed
backward postcondition: not computed
backward transformer: not computed
backward invariant: not computed
termination argument: not computed
terminates: unknown

Analyzing function main
Computing summary

Summary for function main
params: 
globals_in: 
globals_out: main#return_value#phi37 
forward precondition: TRUE
forward transformer: main#return_value#phi37 <= 0 && -((signed __CPROVER_bitvector[33])main#return_value#phi37) <= 0
forward invariant: TRUE
backward precondition: not computed
backward postcondition: not computed
backward transformer: not computed
backward invariant: not computed
termination argument: not computed
terminates: unknown

Analyzing function _start
Computing summary

Summary for function _start
params: 
globals_in: 
globals_out: 
forward precondition: TRUE
forward transformer: TRUE
forward invariant: TRUE
backward precondition: not computed
backward postcondition: not computed
backward transformer: not computed
backward invariant: not computed
termination argument: not computed
terminates: unknown

Checking properties of main
Loops fully unwound
Running refinement loop with Glucose Syrup with simplifier
Checking spuriousness:

    Not spurious
Checking properties of _start
Loops fully unwound
Running refinement loop with Glucose Syrup with simplifier
Checking properties of divides
Loops fully unwound
Running refinement loop with Glucose Syrup with simplifier
Checking properties of gcd
Loops fully unwound
Running refinement loop with Glucose Syrup with simplifier
Checking properties of __CPROVER_initialize
Loops fully unwound
Running refinement loop with Glucose Syrup with simplifier
** statistics: 
  number of solver instances: 5
  number of solver calls: 913
  number of summaries used: 4
  number of termination arguments computed: 0

[main.assertion.1] : FAILURE
[gcd.assertion.1] : OK

** 0 of 2 unknown
** 1 of 2 failed
VERIFICATION FAILED
perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
	LANGUAGE = (unset),
	LC_ALL = (unset),
	LC_MEASUREMENT = "en_GB.UTF-8",
	LC_PAPER = "en_GB.UTF-8",
	LC_MONETARY = "en_GB.UTF-8",
	LC_NAME = "en_GB.UTF-8",
	LC_ADDRESS = "en_GB.UTF-8",
	LC_NUMERIC = "en_GB.UTF-8",
	LC_TELEPHONE = "en_GB.UTF-8",
	LC_IDENTIFICATION = "en_GB.UTF-8",
	LC_TIME = "en_GB.UTF-8",
	LANG = "C"
    are supported and installed on your system.
perl: warning: Falling back to the standard locale ("C").
FALSE
